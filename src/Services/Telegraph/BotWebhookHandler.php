<?php
namespace Services\Telegraph;


use Illuminate\Support\Str;
use Illuminate\Http\Request;
use App\Jobs\AmoSendClientInfo;
use Domain\Client\Models\Client;
use Illuminate\Support\Stringable;
use Illuminate\Support\Facades\Log;
use DefStudio\Telegraph\DTO\Message;
use Illuminate\Support\Facades\Storage;
use DefStudio\Telegraph\DTO\InlineQuery;
use DefStudio\Telegraph\Keyboard\Button;
use Services\Telegraph\DTO\ChatJoinQuery;
use DefStudio\Telegraph\DTO\CallbackQuery;
use DefStudio\Telegraph\Keyboard\Keyboard;
use Services\Telegraph\Models\TelegraphChat;
use DefStudio\Telegraph\Keyboard\ReplyButton;
use Services\AmoCRM\WebHooks\NewTelegramUser;
use DefStudio\Telegraph\Keyboard\ReplyKeyboard;
use DefStudio\Telegraph\Handlers\WebhookHandler;
use DefStudio\Telegraph\Exceptions\TelegramWebhookException;
use Services\Telegraph\Facade\TelegraphCustom as TelegraphCustomFacade;


class BotWebhookHandler extends WebhookHandler
{

    protected array $queryClients = [
        '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:' => 'setClientName',
        '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å:' => 'setClientEmail',
        '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:' => 'setClientPhone',
    ];  

    protected array $requireClientFields = [
        'name' => 'getClientName',
        'email' => 'getClientEmail',
        'phone' => 'getClientPhone',
    ]; 

    public function handle(Request $request, \DefStudio\Telegraph\Models\TelegraphBot $bot): void
    {
        Log::build(['driver' => 'single', 'path' => storage_path('logs/telegram-webhook.log')])->info($request);
        parent::handle($request, $bot);

        if ($this->request->has('chat_join_request')) {
            /* @phpstan-ignore-next-line */

            $this->handleChatJoinQuery(ChatJoinQuery::fromArray($this->request->input('chat_join_request')));
            
        }

    }

    protected function handleChatJoinQuery(ChatJoinQuery $chatJoinQuery)
    {
 
        $chat_id = $chatJoinQuery->chat()->id();
        $user_id = $chatJoinQuery->from()->id();
     
        $telegraphChat = TelegraphChat::with('client')->whereHas('client', function($q) use($user_id){
                    $q->where('telegram_id', $user_id);
                })->first();

        if(!$telegraphChat || !($chat_id == config('constant.telegram_group_id'))){
            return;
        }

        TelegraphCustomFacade::approveChatJoin( $chat_id, $user_id )->send();
        $telegraphChat->html("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!"
        )->keyboard(function(Keyboard $keyboard) use($chatJoinQuery){
            return $keyboard
                ->button('–í –∫–∞–Ω–∞–ª')->url(config('constant.telegram_group_link'));
        })->send();
  
        //do webHook to AmoCRM
        AmoSendClientInfo::dispatch($telegraphChat->client);
        return;

    }

    public function start(): void
    {

        $this->setClient();

        $this->chat->photo('https://test.rakurs82.ru/public/storage/telegram/first_message.png')
        ->html("–ú—ã –ø–æ–º–æ–≥–∞–µ–º —Ç–≤–æ—Ä—Ü–∞–º <b>–ª–µ–≥–∫–æ –º–æ–Ω–µ—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç</b> –≤ –ª—é–±–æ–π —Ç–æ—á–∫–µ –º–∏—Ä–∞, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—è –≤–∞—à—É —Å—Ç—Ä–∞—Å—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. 
        \n–í—Å—ë —ç—Ç–æ —á–∞—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è <b>Papaya</b> –∑–∞ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é —Å–≤–æ–±–æ–¥—É —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π! –° –ø–æ–º–æ—â—å—é –±–ª–æ–∫—á–µ–π–Ω–∞, –º—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º <b>–º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–∏—Å—Å–∏—è–º–∏</b>.
        ")
        ->keyboard(Keyboard::make()->buttons([
            Button::make('üåü –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ Papaya')->action('info'),
            Button::make('üöÄ –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')->action('getAgree'),
        ]))
        ->send();
    }

    public function info()
    {
        $this->chat->photo('')
        ->html("–¢—ã –º–æ–∂–µ—à—å <b>–ø—Ä–æ–¥–∞–≤–∞—Ç—å —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ</b>, –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–≤–æ–π –∫–∞–Ω–∞–ª, –∏–ª–∏ <b>–º–æ–Ω–µ—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∏–º—ã</b> –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏. 
        \n–ù–∞—á–∞—Ç—å –ø—Ä–æ—Å—Ç–æ ‚Äî —Ç–µ–±–µ –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ <b>–∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª–µ–∫</b>. 
        \n–ì–æ—Ç–æ–≤ —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é —ç—Ç–æ–≥–æ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è? <b>–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –∏–º—è, email –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –∏ –º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø –∫ –Ω–∞—à–µ–º—É –∑–∞–∫—Ä—ã—Ç–æ–º—É —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª—É. 
        \n–¢–∞–º –Ω–∞—á–Ω–µ—Ç—Å—è —Ç–≤–æ–µ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –º–∏—Ä <b>Papaya</b>! üöÄ
         ")
        ->keyboard(Keyboard::make()->buttons([
            Button::make('üöÄ –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')->action('getAgree'),
        ]))
        ->send();
    
    }

    public function getAgree()
    {
        $this->chat->html("üìù –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ —Å–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ú—ã —É–≤–∞–∂–∞–µ–º —Ç–≤–æ—é –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª—É—á—à–µ–≥–æ –æ–ø—ã—Ç–∞ –¥–ª—è —Ç–µ–±—è –≤ —Ä–∞–º–∫–∞—Ö –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –Ω–∞—à–µ–π <a href='https://papaya.land/documents/Papaya%20Privacy%20Policy.pdf'>–ø–æ–ª–∏—Ç–∏–∫–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a>.
            \n–ú—ã —Ü–µ–Ω–∏–º —Ç–≤–æ–π –≤—ã–±–æ—Ä –∏ –≥–æ—Ç–æ–≤—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ —Ç–≤–æ–µ–≥–æ –ø—É—Ç–∏! üåø")
            ->keyboard(Keyboard::make()->buttons([
                    Button::make('‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω')->action('agree'),
                    Button::make('‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω')->action('disagree'),
            ]))->send();
    }

    public function handleChatMessage(Stringable $text): void
    {
        $reply = $this->message->replyToMessage();
        if ( $reply  && isset ( $this->queryClients[$this->message->replyToMessage()->text()] ) ){
            $this->{$this->queryClients[$this->message->replyToMessage()->text()]}();
        }
    }

    public function agree()
    {
        $this->nextAction();
    }

    public function disagree()
    {
        $this->chat->html("–ñ–∞–ª—å, —á—Ç–æ –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –í—ã –Ω–µ —Å–º–æ–≥–ª–∏ –∫ –Ω–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.\n–ú—ã –±—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å —É –Ω–∞—Å –≤–Ω–æ–≤—å")
        ->keyboard(Keyboard::make()->buttons([
                Button::make('–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑')->action('getAgree'),
        ]))->send();
    }

    protected function setClient()
    {
        $message = Str::of($this->message?->text() ?? '');
        $source = null;
        if($message->contains(config('constant.telegram_source_expression'))){
            $source = (string) trim($message->after(config('constant.telegram_source_expression')) ?? '');
        }

        $this->chat->client()->updateOrCreate([
            'telegraph_chat_id' => $this->chat->id
            ],
            [
                'telegram_id' => $this->message->from()->id(),
                'username' => $this->message->from()->username(),
                'first_name' => $this->message->from()->firstName(),
                'last_name' => $this->message->from()->lastName(),
                'source' => $source,
            ]
        );
    }

    public function setClientName(): void
    {
        $this->message->text();
        $validator = validator(
            ['name'=>$this->message->text()],
            ['name'=>'required']
        );

        if ($validator->fails()) {
            $this->chat->message("–ò–º—è –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")->send();
            $this->getClientName();
            return;
        }

        $this->chat->client()->update(['name' => $this->message->text()]);

        $this->nextAction();

    }

    public function getClientName(): void
    {
        $this->chat->message("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")->forceReply(placeholder: '–í–≤–µ–¥–∏—Ç–µ –∏–º—è')->send();
    }

    public function setClientEmail(): void
    {
        $this->message->text();
        $validator = validator(
            ['email'=>$this->message->text()],
            ['email'=>'required|email:rfc,dns']
        );

        if ($validator->fails()) {
            $this->chat->message("Email –∞–¥—Ä–µ—Å –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")->send();
            $this->getClientEmail();
            return;
        }

        $this->chat->client()->update(['email' => $this->message->text()]);

        $this->nextAction();

    }

    public function getClientEmail(): void
    {
        $this->chat->message("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å:")->forceReply(placeholder: '–í–≤–µ–¥–∏—Ç–µ email')->send();
    }

    public function setClientPhone(): void
    {
        $phone = preg_replace("/[^0-9]/", '', $this->message->text());
        $this->message->text();
        $validator = validator(
            ['phone'=>$phone],
            ['phone'=> 'required|digits_between:11,13']
        );

        if ($validator->fails()) {
            $this->chat->message("–¢–µ–ª–µ—Ñ–æ–Ω –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")->send();
            $this->getClientPhone();
            return;
        }

        $this->chat->client()->update(['phone' => $phone]);

        $this->nextAction();
    }

    public function getClientPhone(): void
    {
        $this->chat->message("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:")->forceReply(placeholder: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')->send();
    }

    public function nextAction(): void
    {
        foreach($this->requireClientFields as $field => $action){
            if(empty($this->chat->client->{$field})){
                $this->{$action}();
                return;
            }
        }
        $this->success();
    }

    public function success(): void
    {
        $this->chat->html("–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!
            \n–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –í–∞–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª, –∑–∞—è–≤–∫–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!
            ")
            ->keyboard(function(Keyboard $keyboard){
                return $keyboard
                    ->button('–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª')->url(config('constant.telegram_group_link'));
            })
            ->send();
    }


}